{
  "useMemo": {
    "prefix": "um",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => {",
      "\t ${2}",
      "}, [${3}])"
    ],
    "description": "React useMemo() hook"
  },
  "useCallback": {
    "prefix": "ub",
    "body": ["const ${1} = useCallback(() => {", "\t${2}", "}, [${3}])"],
    "description": "React useCallback() hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "\t$1", "}, [${3}])$0"],
    "description": "React useEffect() hook"
  },
  "useState": {
    "prefix": "us",
    "body": "const [${1}, ${2}] = useState(${3})$0",
    "description": "use state hook"
  },
  "useRequest": {
    "prefix": "ur",
    "body": "const [${1}, ${2}] = useRequest(${3})$0",
    "description": "use query"
  },
  "useQuery": {
    "prefix": "uq",
    "body": "const [${1}, ${2}] = useQuery(${3})$0",
    "description": "use query"
  },
  "useBoolean": {
    "prefix": "ubl",
    "body": "const {state:${1}, toggle:toggle${1}} = useBoolean(${2})$0",
    "description": "use query"
  },
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": "import React from 'react'\n\nexport const ${TM_FILENAME_BASE}: React.FC<{}> = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
    "description": "Creates a React functional component without PropTypes"
  },
  "Log to the console": {
		"prefix": "log",
		"body": [
			"console.log($1);"
		],
		"description": "Log to the console"
	},
  "imoprt": {
    "prefix": "im",
    "body": "import ${2} from ${1}"
  },
  "cp": {
    "prefix": "cp",
    "body": "const { ${0} } = props"
  },
  "cn": {
    "prefix": "cn",
    "body": "const { ${2} } = ${1}"
  },
  ":bug: fix:": {
    "prefix": "bf",
    "body": ":bug: fix:${0}"
  },
  "function Component": {
    "prefix": "ff",
    "body": [
      "import React from 'react'",
      "",
      "interface IProps {",
      "",
      "}",
      "",
      "const ${1}: React.FC<IProps> = () => {",
      "  return (",
      "    <div>${2}</div>",
      "  )",
      "}",
      "",
      "export default ${1}",
      ""
    ]
  }
}

